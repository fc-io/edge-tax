{
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "plugins": [
    "babel",
    "react"
  ],
  "env": {
    "browser": true,
    "es6": true,
    "node": true,
    "mocha": true
  },
  "globals": {
    // "__DEV__": true,
    "__dirname": false,
    "cancelAnimationFrame": false,
    // "clearImmediate": true,
    "clearInterval": false,
    "clearTimeout": false,
    "console": false,
    "document": false,
    // "escape": false,
    "expect": false,
    // "exports": false,
    // "fetch": false,
    // "global": false,
    // "Map": true,
    "module": false,
    // "navigator": false,
    "process": false,
    // "Promise": true,
    "requestAnimationFrame": true,
    "require": false,
    // "Set": true,
    // "setImmediate": true,
    "setInterval": false,
    "setTimeout": false,
    "window": false,
    // "XMLHttpRequest": false,
    // "pit": false
  },
  "rules": {
    // Possible Errors
    "comma-dangle": [1, "always-multiline"],  // disallow trailing commas in object literals
    "no-cond-assign": 1,                      // disallow assignment in conditional expressions
    "no-console": 1,                          // disallow use of console (off by default in the node environment)
    "no-constant-condition": 1,               // disallow use of constant expressions in conditions
    "no-control-regex": 1,                    // disallow control characters in regular expressions
    "no-debugger": 1,                         // disallow use of debugger
    "no-dupe-args": 1,                        // disallow duplicate arguments in functions
    "no-dupe-keys": 1,                        // disallow duplicate keys when creating object literals
    "no-duplicate-case": 1,                   // disallow a duplicate case label.
    "no-empty": 1,                            // disallow empty statements
    "no-empty-character-class": 1,            // disallow the use of empty character classes in regular expressions
    "no-ex-assign": 1,                        // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 1,               // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": [1, "all"],            // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 1,                       // disallow unnecessary semicolons
    "no-func-assign": 1,                      // disallow overwriting functions written as function declarations
    "no-inner-declarations": [1, "both"],     // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 1,                   // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 1,             // disallow irregular whitespace outside of strings and comments
    "no-obj-calls": 1,                        // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-prototype-builtins": 1,               // Disallow use of Object.prototypes builtins directly
    "no-regex-spaces": 1,                     // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 1,                    // disallow sparse arrays
    "no-template-curly-in-string": 1,         // disallow template literal placeholder syntax in regular strings
    "no-unexpected-multiline": 1,             // disallow code that looks like two expressions but is actually one
    "no-unreachable": 1,                      // disallow unreachable statements after a return, throw, continue, or break statement
    "no-unsafe-finally": 1,                   // disallow control flow statements in finally blocks
    "no-unsafe-negation": 1,                  // disallow negating the left operand of relational operators
    "use-isnan": 1,                           // disallow comparisons with the value NaN
    "valid-jsdoc": 1,                         // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 1,                        // Ensure that the results of typeof are compared against a valid string

    // Best Practices
    "accessor-pairs": 1,                // enforce getter/setter pairs in objects
    "array-callback-return": 1,         // enforce return statements in callbacks of arrayâ€™s methods
    "block-scoped-var": 1,              // treat var statements as if they were block scoped (off by default)
    "class-methods-use-this": 1,        // enforce that class methods utilize this
    "complexity": [1, 4],               // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 0,             // require return statements to either always or never specify values
    "curly": 1,                         // specify curly brace conventions for all control statements
    "default-case": 0,                  // require default case in switch statements (off by default)
    "dot-location": [1, "property"],    // enforce consistent newlines before or after dots
    "dot-notation": 1,                  // encourages use of dot notation whenever possible
    "eqeqeq": 1,                        // require the use of === and !==
    "guard-for-in": 1,                  // make sure for-in loops have an if statement (off by default)
    "no-alert": 1,                      // disallow the use of alert, confirm, and prompt
    "no-caller": 1,                     // disallow use of arguments.caller or arguments.callee
    "no-case-declarations": 1,          // disallow lexical declarations in case clauses
    "no-div-regex": 1,                  // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 0,                // disallow else after a return in an if (off by default)
    "no-empty-function": 1,             // disallow use of empty functions
    "no-empty-pattern": 1,              // disallow use of empty destructuring patterns
    "no-eq-null": 1,                    // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 1,                       // disallow use of eval()
    "no-extend-native": 1,              // disallow adding to native types
    "no-extra-bind": 1,                 // disallow unnecessary function binding
    "no-extra-label": 1,                // disallow unnecessary labels
    "no-fallthrough": 1,                // disallow fallthrough of case statements
    "no-floating-decimal": 1,           // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-global-assign": 1,              // disallow assignments to native objects or read-only global variables
    "no-implicit-coercion": 1,          // disallow the type conversions with shorter notations
    "no-implicit-globals": 1,           // disallow var and named functions in global scope
    "no-implied-eval": 1,               // disallow use of eval()-like methods
    "no-invalid-this": 1,               // disallow this keywords outside of classes or class-like objects
    "no-iterator": 1,                   // disallow usage of __iterator__ property
    "no-labels": 1,                     // disallow use of labels for anything other then loops and switches
    "no-lone-blocks": 1,                // disallow unnecessary nested blocks
    "no-loop-func": 1,                  // disallow creation of functions within loops
    "no-magic-numbers": 0,              // disallow the use of magic numbers
    "no-multi-spaces": 1,               // disallow use of multiple spaces
    "no-multi-str": 1,                  // disallow use of multiline strings
    "no-new": 1,                        // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 1,                   // disallow use of new operator for Function object
    "no-new-wrappers": 1,               // disallows creating new instances of String,Number, and Boolean
    "no-octal": 1,                      // disallow use of octal literals
    "no-octal-escape": 1,               // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-param-reassign": 1,             // disallow reassignment of function parameters
    "no-proto": 1,                      // disallow usage of __proto__ property
    "no-redeclare": 1,                  // disallow declaring the same variable more then once
    "no-return-assign": 1,              // disallow use of assignment in return statement
    "no-script-url": 1,                 // disallow use of javascript: urls.
    "no-self-assign": 1,                // disallow assignments where both sides are exactly the same
    "no-self-compare": 1,               // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 1,                  // disallow use of comma operator
    "no-throw-literal": 1,              // restrict what can be thrown as an exception
    "no-unmodified-loop-condition": 1,  // disallow unmodified conditions of loops
    "no-unused-expressions": 0,         // disallow usage of expressions in statement position
    "no-unused-labels": 1,              // disallow unused labels
    "no-useless-call": 1,               // disallow unnecessary .call() and .apply()
    "no-useless-concat": 1,             // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": 1,             // disallow unnecessary usage of escape character
    "no-void": 1,                       // disallow use of void operator (off by default)
    "no-warning-comments": 0,           // disallow usage of configurable warning terms in comments": 1,                            // e.g. TODO or FIXME (off by default)
    "no-with": 1,                       // disallow use of the with statement
    "radix": 0,                         // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 0,                   // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 0,                     // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 1,                          // require or disallow Yoda conditions

    // Strict Mode
    "strict": [1, "global"],            // require or disallow the "use strict" pragma in the global scope (off by default in the node environment)

    // Variables
    "init-declarations": [1, "always"], // enforce or disallow variable initializations at definition
    "no-catch-shadow": 1,               // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 1,                 // disallow deletion of variables
    "no-label-var": 1,                  // disallow labels that share a name with a variable
    "no-restricted-globals": 0,         // restrict usage of specified global variables
    "no-shadow": 1,                     // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 1,    // disallow shadowing of names such as arguments
    "no-undef": 1,                      // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": 1,                 // disallow use of undefined when initializing variables
    "no-undefined": 0,                  // disallow use of undefined variable (off by default)
    "no-unused-vars": [1, {"vars": "all", "args": "none"}], // disallow declaration of variables that are not used in the code
    "no-use-before-define": 1,          // disallow use of variables before they are defined

    // Node.js
    "callback-return": 1,               // enforce return after a callback
    "global-require": 0,                // enforce require() on top-level module scope
    "handle-callback-err": 1,           // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": 1,             // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": 1,                // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": 1,                // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-env": 1,                // disallow use of process.env
    "no-process-exit": 1,               // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": 1,         // restrict usage of specified node modules (off by default)
    "no-restricted-properties": 0,      // disallow certain properties on certain objects
    "no-sync": 1,                       // disallow use of synchronous methods (off by default)

    // Stylistic Issues
    "array-bracket-spacing": [1, "never"],     // enforce spacing inside array brackets
    "block-spacing": [1, "never"],              // disallow or enforce spaces inside of single line blocks
    "brace-style": [1, "1tbs", { "allowSingleLine": true }], // enforce one true brace style (off by default)
    "camelcase": [1, {"properties": "never"}],  // require camel case names
    "comma-spacing": 1,                         // enforce spacing before and after comma
    "comma-style": 1,                           // enforce one true comma style
    "computed-property-spacing": 1,             // require or disallow padding inside computed properties
    "consistent-this": [1, "that"],             // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 1,                              // enforce newline at the end of file, with no multiple empty lines
    "func-call-spacing": 1,                     // require or disallow spacing between function identifiers and their invocations
    "func-names": 0,                            // require function expressions to have a name (off by default)
    "func-style": [1, "expression"],            // enforces use of function declarations or expressions (off by default)
    "id-blacklist": 0,                          // disallow certain identifiers to prevent them being used
    "id-length": 0,                             // enforce minimum and maximum identifier lengths (variable names, property names etc.)
    "id-match": 0,                              // require identifiers to match the provided regular expression
    "indent": [1, 2, {"SwitchCase": 1}],        // specify tab or space width for your code
    "jsx-quotes": 1,                            // specify whether double or single quotes should be used in JSX attributes
    "key-spacing": 1,                           // enforce spacing between keys and values in object literal properties
    "keyword-spacing": 1,                       // enforce spacing before and after keywords
    "line-comment-position": 0,                 // enforce position of line comments
    "linebreak-style": 1,                       // enforce linebreak style
    "lines-around-comment": 0,                  // enforce empty lines around comments
    "lines-around-directive": [1, { "before": "never", "after": "always" }],  // require or disallow newlines around directives
    "max-depth": 0,                             // specify the maximum depth that blocks can be nested
    "max-len": [1, {
      "code": 120,
      "tabWidth": 1,
      "ignoreComments": true,
      "ignoreUrls": true
    }],                                         // specify the maximum length of a line in your program
    "max-nested-callbacks": 0,                  // specify the maximum depth callbacks can be nested
    "max-params": 0,                            // specify the number of parameters that can be used in the function declaration
    "max-statements": 0,                        // specify the maximum number of statement allowed in a function
    "max-statements-per-line": [1, { "max": 2 }],  // specify the maximum number of statements allowed per line
    "multiline-ternary": 0,                     // enforce newlines between operands of ternary expressions
    "new-cap": 0,                               // require a capital letter for constructors
    "new-parens": 1,                            // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": 0,                     // require or disallow an empty newline after variable declarations
    "newline-before-return": 0,                 // require newline before return statement
    "newline-per-chained-call": [1, {"ignoreChainWithDepth": 3}], // enforce newline after each call when chaining the calls
    "no-array-constructor": 1,                  // disallow use of the Array constructor
    "no-bitwise": 1,                            // disallow use of bitwise operators
    "no-continue": 1,                           // disallow use of the continue statement
    "no-inline-comments": 0,                    // disallow comments inline after code
    "no-lonely-if": 1,                          // disallow if as the only statement in an else block
    "no-mixed-spaces-and-tabs": 1,              // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": 1,               // disallow multiple empty lines
    "no-negated-condition": 0,                  // disallow negated conditions
    "no-nested-ternary": 1,                     // disallow nested ternary expressions (off by default)
    "no-new-object": 1,                         // disallow use of the Object constructor
    "no-plusplus": 1,                           // disallow use of unary operators, ++ and -- (off by default)
    "no-restricted-syntax": 0,                  // disallow use of certain syntax in code
    "no-tabs": 1,                               // Disallow tabs in file
    "no-ternary": 0,                            // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 1,                    // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 1,                  // disallow dangling underscores in identifiers
    "no-unneeded-ternary": 1,                   // disallow the use of ternary operators when a simpler alternative exists
    "no-whitespace-before-property": 1,         // disallow whitespace before properties
    "object-curly-spacing": [1, "never"],       // require or disallow padding inside curly braces
    "one-var": [1, "never"],                    // allow just one var statement per function (off by default)
    "one-var-declaration-per-line": 0,          // require or disallow an newline around variable declarations
    "operator-assignment": 1,                   // require assignment operator shorthand where possible or prohibit it entirely
    "operator-linebreak": [2, "after"],   // enforce operators to be placed before or after line breaks
    "padded-blocks": [1, "never"],              // enforce padding within blocks
    "quote-props": [1, "as-needed"],            // require quotes around object literal property names (off by default)
    "quotes": [1, "single"],                    // specify whether double or single quotes should be used
    "require-jsdoc": 0,                         // require JSDoc comment
    "semi": [1, "never"],                       // require or disallow use of semicolons instead of ASI
    "semi-spacing": 1,                          // require a space after a semi-colon
    "sort-imports": 0,                          // enforce sorting import declarations within module
    "symbol-description": 1,                    // require symbol descriptions
    "sort-keys": [1, "asc", {"caseSensitive": false, "natural": true}],  // requires object keys to be sorted
    "sort-vars": 0,                             // sort variables within the same declaration block (off by default)
    "space-before-blocks": 1,                   // require or disallow a space before blocks
    "space-before-function-paren": [1, {"anonymous": "always", "named": "never"}], // require or disallow a space before function opening parenthesis
    "space-in-parens": 1,                       // require or disallow spaces inside parentheses
    "space-infix-ops": 1,                       // require spaces around operators
    "space-unary-ops": [1, { "words": true, "nonwords": false }], // require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": 0,                        // require or disallow a space immediately following the // or /* in a comment
    "unicode-bom": 1,                           // require or disallow the Unicode BOM
    "wrap-regex": 1,                            // require regex literals to be wrapped in parentheses (off by default)

    // ECMAScript 6
    "arrow-body-style": 0,                // require braces in arrow function body
    "arrow-parens": [1, "always"],        // require parens in arrow function arguments
    "arrow-spacing": 1,                   // require space before/after arrow functionâ€™s arrow
    "constructor-super": 1,               // ensure calling of super() in constructors
    "generator-star-spacing": [1, {"before": false, "after": true}],  // enforce spacing around the * in generator functions
    "no-class-assign": 1,                 // disallow modifying variables of class declarations
    "no-confusing-arrow": 1,              // disallow arrow functions where they could be confused with comparisons
    "no-const-assign": 1,                 // disallow modifying variables that are declared using const
    "no-dupe-class-members": 1,           // disallow duplicate name in class members
    "no-duplicate-imports": 1,            // disallow duplicate module imports
    "no-new-symbol": 1,                   // disallow use of the new operator with the Symbol object
    "no-restricted-imports": 0,           // restrict usage of specified modules when loaded by import declaration
    "no-this-before-super": 1,            // disallow use of this/super before calling super() in constructors
    "no-useless-computed-key": 1,         // disallow unnecessary computed property keys in object literals
    "no-useless-constructor": 1,          // disallow unnecessary constructor
    "no-useless-rename": 0,               // disallow renaming import, export, and destructured assignments to the same name
    "no-var": 1,                          // require let or const instead of var
    "object-shorthand": 1,                // require method and property shorthand syntax for object literals
    "prefer-arrow-callback": 1,           // suggest using arrow functions as callbacks
    "prefer-const": 1,                    // suggest using const declaration for variables that are never reassigned after declared
    "prefer-numeric-literals": 1,         // disallow parseInt() in favor of binary, octal, and hexadecimal literals
    "prefer-reflect": 1,                  // suggest using Reflect methods where applicable
    "prefer-rest-params": 1,              // suggest using the rest parameters instead of arguments
    "prefer-spread": 1,                   // suggest using the spread operator instead of .apply()
    "prefer-template": 1,                 // suggest using template literals instead of strings concatenation
    "require-yield": 1,                   // disallow generator functions that do not have yield
    "template-curly-spacing": 1,          // enforce spacing around embedded expressions of template strings
    "yield-star-spacing": 1,              // enforce spacing around the * in yield* expressions

    // React
    "react/display-name": 0,              // Prevent missing displayName in a React component definition
    "react/forbid-prop-types": 0,         // Forbid certain propTypes
    "react/no-danger": 1,                 // Prevent usage of dangerous JSX properties
    "react/no-deprecated": 1,             // Prevent usage of deprecated methods
    "react/no-did-mount-set-state": 1,    // Prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": 1,   // Prevent usage of setState in componentDidUpdate
    "react/no-direct-mutation-state": 1,  // Prevent direct mutation of this.state
    "react/no-find-dom-node": 1,                // Prevent usage of findDOMNode
    "react/no-is-mounted": 1,             // Prevent usage of isMounted
    "react/no-multi-comp": 1,             // Prevent multiple component definition per file
    "react/no-set-state": 0,              // Prevent usage of setState
    "react/no-string-refs": 1,            // Prevent using string references in ref attribute.
    "react/no-unknown-property": 1,       // Prevent usage of unknown DOM property (fixable)
    "react/prefer-es6-class": 1,          // Enforce ES5 or ES6 class for React Components
    "react/prefer-stateless-function": 0, // Enforce stateless React Components to be written as a pure function
    "react/prop-types": 1,                // Prevent missing props validation in a React component definition
    "react/react-in-jsx-scope": 1,        // Prevent missing React when using JSX
    "react/require-optimization": 0,      // Enforce React components to have a shouldComponentUpdate method
    "react/require-render-return": 0,     // Enforce ES5 or ES6 class for returning value in render function
    "react/self-closing-comp": 1,         // Prevent extra closing tags for components without children
    "react/sort-comp": 1,                 // Enforce component methods order
    "react/sort-prop-types": 1,           // Enforce propTypes declarations alphabetical sorting

    // JSX
    "react/jsx-boolean-value": [1, "always"], // Enforce boolean attributes notation in JSX (fixable)
    "react/jsx-closing-bracket-location": 1,  // Validate closing bracket location in JSX
    "react/jsx-curly-spacing": 1,             // Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
    "react/jsx-equals-spacing": 1,            // Enforce or disallow spaces around equal signs in JSX attributes
    "react/jsx-filename-extension": [1, {"extensions": [".js"]}],  // Restrict file extensions that may contain JSX
    "react/jsx-first-prop-new-line": [1, "multiline"],  // Enforce position of the first prop in JSX
    "react/jsx-handler-names": 0,             // Enforce event handler naming conventions in JSX
    "react/jsx-indent-props": [1, 2],         // Validate props indentation in JSX (fixable)
    "react/jsx-indent": [1, 2],               // Validate JSX indentation
    "react/jsx-key": 1,                       // Validate JSX has key prop when in array or iterator
    "react/jsx-max-props-per-line": 0,        // Limit maximum of props on a single line in JSX
    "react/jsx-no-bind": 1,                   // Prevent usage of .bind() and arrow functions in JSX props
    "react/jsx-no-comment-textnodes": 1,      // Prevent comments from being inserted as text nodes
    "react/jsx-no-duplicate-props": 1,        // Prevent duplicate props in JSX
    "react/jsx-no-literals": 0,               // Prevent usage of unwrapped JSX strings
    "react/jsx-no-target-blank": 2,           // Prevent usage of unsafe target='_blank'
    "react/jsx-no-undef": 1,                  // Disallow undeclared variables in JSX
    "react/jsx-pascal-case": 1,               // Enforce PascalCase for user-defined JSX components
    "react/jsx-sort-props": 0,                // Enforce props alphabetical sorting
    "react/jsx-space-before-closing": 1,      // Validate spacing before closing bracket in JSX (fixable)
    "react/jsx-uses-react": 1,                // Prevent React to be incorrectly marked as unused
    "react/jsx-uses-vars": 1,                 // Prevent variables used in JSX to be incorrectly marked as unused
    "react/jsx-wrap-multilines": 1,           // Prevent missing parentheses around multilines JSX (fixable)

    // React Native
    // "react-native/no-unused-styles": 1,
    // "react-native/split-platform-components": 1,
  }
}
